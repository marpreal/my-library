generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  name             String?
  email            String         @unique
  image            String?
  createdAt        DateTime       @default(now())
  bio              String?
  favoriteGenre    String?
  location         String?
  theme            String?
  books            Book[]
  comments         Comment[]
  receivedMessages Message[]      @relation("ReceivedMessages")
  sentMessages     Message[]      @relation("SentMessages")
  movies           Movie[]
  movieReviews     MovieReview[]
  ratings          Rating[]
  recipes          Recipe[]
  reviews          Review[]
  tbrBooks         TBRBook[]
  DailyDiet        DailyDiet[]
  ShoppingCart     ShoppingCart[]
}

model Message {
  id          String   @id @default(uuid())
  senderId    String
  content     String
  timestamp   DateTime @default(now())
  recipientId String?
  recipient   User?    @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)
  sender      User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
}

model Book {
  id          Int      @id @default(autoincrement())
  author      String
  date        DateTime
  title       String
  imageUrl    String?
  description String?
  publisher   String?
  createdAt   DateTime @default(now())
  userId      String   @map("userId")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews     Review[]
}

model Review {
  id        Int      @id @default(autoincrement())
  bookId    Int
  review    String
  rating    Int
  createdAt DateTime @default(now())
  userId    String   @map("userId")
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TBRBook {
  id      Int      @id @default(autoincrement())
  title   String
  addedAt DateTime @default(now())
  userId  String   @map("userId")
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Movie {
  id          Int           @id @default(autoincrement())
  title       String
  director    String?
  releaseDate DateTime?
  imageUrl    String?
  description String?
  genre       String?
  viewedDate  DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  userId      String        @map("userId")
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews     MovieReview[]
}

model MovieReview {
  id        Int      @id @default(autoincrement())
  movieId   Int
  review    String
  rating    Int
  createdAt DateTime @default(now())
  userId    String   @map("userId")
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  userId    String
  recipeId  Int
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Rating {
  id        Int      @id @default(autoincrement())
  value     Int
  userId    String
  recipeId  Int
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Recipe {
  id                Int                @id @default(autoincrement())
  title             String
  category          String
  description       String?
  createdAt         DateTime           @default(now())
  ingredients       String[]
  userId            String             @map("userId")
  isPublic          Boolean            @default(false)
  imageUrl          String?
  comments          Comment[]
  nutritionalValues NutritionalValue[]
  ratings           Rating[]
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  Meal              Meal[]
}

model NutritionalValue {
  id        Int      @id @default(autoincrement())
  recipeId  Int
  calories  Float
  protein   Float
  carbs     Float
  fats      Float
  fiber     Float?
  sugar     Float?
  sodium    Float?
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model DailyDiet {
  id        Int      @id @default(autoincrement())
  userId    String
  date      DateTime
  meals     Meal[]
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Meal {
  id          Int      @id @default(autoincrement())
  dailyDietId Int
  type        String
  recipeId    Int?     
  notes       String?
  createdAt   DateTime @default(now())

  dailyDiet   DailyDiet @relation(fields: [dailyDietId], references: [id], onDelete: Cascade)
  recipe      Recipe?   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}


model ShoppingCart {
  id        Int            @id @default(autoincrement())
  userId    String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  items     ShoppingItem[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ShoppingItem {
  id             Int     @id @default(autoincrement())
  shoppingCartId Int
  name           String
  quantity       String?
  checked        Boolean @default(false)

  shoppingCart ShoppingCart @relation(fields: [shoppingCartId], references: [id], onDelete: Cascade)
}
