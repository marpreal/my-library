generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  name          String?
  email         String        @unique
  image         String?
  createdAt     DateTime      @default(now())
  bio           String?
  favoriteGenre String?
  location      String?
  theme         String?
  books         Book[]
  movies        Movie[]
  movieReviews  MovieReview[]
  recipes       Recipe[]
  reviews       Review[]
  tbrBooks      TBRBook[]
}

model Book {
  id          Int      @id @default(autoincrement())
  author      String
  date        DateTime
  title       String
  imageUrl    String?
  description String?
  publisher   String?
  createdAt   DateTime @default(now())
  userId      String   @map("userId")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews     Review[]
}

model Review {
  id        Int      @id @default(autoincrement())
  bookId    Int
  review    String
  rating    Int
  createdAt DateTime @default(now())
  userId    String   @map("userId")
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TBRBook {
  id      Int      @id @default(autoincrement())
  title   String
  addedAt DateTime @default(now())
  userId  String   @map("userId")
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Movie {
  id          Int           @id @default(autoincrement())
  title       String
  director    String?
  releaseDate DateTime?
  imageUrl    String?
  description String?
  genre       String?
  viewedDate  DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  userId      String        @map("userId")
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews     MovieReview[]
}

model MovieReview {
  id        Int      @id @default(autoincrement())
  movieId   Int
  review    String
  rating    Int
  createdAt DateTime @default(now())
  userId    String   @map("userId")
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Recipe {
  id               Int               @id @default(autoincrement())
  title            String
  category         String
  description      String?
  createdAt        DateTime          @default(now())
  ingredients      String[]
  isPublic         Boolean           @default(false) 
  userId           String            @map("userId")
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  nutritionalValues NutritionalValue[] 
}


model NutritionalValue {
  id        Int     @id @default(autoincrement())
  recipeId  Int
  calories  Float   
  protein   Float   
  carbs     Float   
  fats      Float   
  fiber     Float?  
  sugar     Float?  
  sodium    Float?  
  createdAt DateTime @default(now())

  recipe    Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade) 
}

